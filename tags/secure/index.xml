<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Secure on 沉风网事</title>
    <link>https://myself659.github.io/tags/secure/</link>
    <description>Recent content in Secure on 沉风网事</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 08 Nov 2019 11:58:06 +0200</lastBuildDate>
    
	<atom:link href="https://myself659.github.io/tags/secure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DoH FAQ</title>
      <link>https://myself659.github.io/2019/11/08/about-doh/</link>
      <pubDate>Fri, 08 Nov 2019 11:58:06 +0200</pubDate>
      
      <guid>https://myself659.github.io/2019/11/08/about-doh/</guid>
      <description>什么是DoH DoH是DNS over HTTPS。
传统DNS相当于DNS over UDP。
DoH带来哪些好处？ 采用DoH对用户来说有如下好处：
 DoH协议不允许其他用户，服务提供商或第三方查看您访问的网站并收集数据，保护了用户的隐私 DoH协议有利于防止欺骗与钓鱼攻击，保护在线数据的安全和隐私 加速DNS解析，提高网页访问速度 对于天朝人民，还有另一个好处就是科学上网  DoH现在可以使用吗？ We&#39;ve enabled an experiment in Chrome 79 for a fraction of our users.  Chrome 79版本对部分用户开启。
firefox 70版本已经支持DoH。
如何使用DoH? 以firefox为例：
在地址输入：about:preferences#general，找到Network Settings选项，点击Settings即可进入设置，具体如下：
参考  DNS over HTTPS Google Public DNS over HTTPS (DoH) supports RFC 8484 standard Moving to an era of Decentralized DNS registry Running a DNS over HTTPS Client  欢迎关注 欢迎关注微信公众帐号：沉风网事(savewind)</description>
    </item>
    
    <item>
      <title>人生中最昂贵的教训：SIM卡转移攻击的细节(译文)</title>
      <link>https://myself659.github.io/2019/05/30/sim-port-attack/</link>
      <pubDate>Thu, 30 May 2019 11:58:06 +0200</pubDate>
      
      <guid>https://myself659.github.io/2019/05/30/sim-port-attack/</guid>
      <description> 上周三我损失了10万美元。它在24小时的时间内在“SIM转移攻击”中消失，耗尽了我的Coinbase帐户。事件已经过去了四天，我被摧毁了。我寝食难安;我充满了焦虑，懊悔和尴尬。
这是我生命中最昂贵的一课，我想与尽可能多的人分享我的经验与教训。我的目标是提高对这类攻击的认识，并促使大家提高在线身份的安全性。
这仍然是非常原始的（我还没有告诉我的家人）；请大家保留对本文所述的天真安全措施的判断。
攻击的细节 您可能会问自己，究竟什么是“SIM转移攻击”？为了描述攻击，我们来看一下典型的在线身份。对于大多数人来说，下图应该看起来很熟悉。
我们大多数人都有一个主电子邮件帐户，该帐户与很多其他在线帐户相关联。我们大多数人还有一个移动设备，如果你忘了密码，可以用这个移动设备来恢复您的电子邮件密码。
授权的SIM转移 将SIM卡转移到另一台设备是移动运营商为其客户提供的服务。它允许客户将他们的电话号码转移到新设备。在大多数情况下，这是完全合法的要求;当我们升级到新手机，切换移动运营商等时会发生这种情况。
SIM转移攻击 但是，“SIM转移攻击”是由未经授权的来源（攻击者）执行的恶意转移。攻击者将您的 SIM卡转移到他们控制的手机上。然后，攻击者在您的电子邮件帐户上启动密码重置流程。验证码会从您的电子邮件提供商发送到您的电话号码。 攻击者会截获该电话号码，因为他们现在控制您的SIM卡。下图逐步概括了攻击过程。
一旦攻击者控制了您的主电子邮件帐户，他们就会开始绕过您通过该电子邮件地址（银行帐户，社交媒体帐户等）管理并支配您的任何在线服务及其资产。如果他们非常恶意，他们甚至可以锁定你的帐户而你却几乎无法收回它们。
花点时间检查一下单个Google帐户绑定的大量敏感信息：
 您的地址，出生日期和其他私人，个人身份信息 访问您（和/或您的合作伙伴）的潜在妥协照片 访问您的日历和即将到来的旅行日期 访问您的私人电子邮件，文档和搜索历史记录 访问您的个人联系人及其私人信息以及与您的关系 访问您的主电子邮件地址用作身份验证来源的所有其他在线服务  事件时间线 通过更好地掌握如何进行此类攻击以及所涉及的范围，让我们深入探讨此特定攻击的时间线。我想描绘一下攻击是如何被执行的，以及我是如何经历这些事件的，以及如果您遇到类似的症状，您可以做些什么来保护自己。
时间线分为四个部分：
 我所经历的：从我的观点来看所经历的事件。如果你遇到类似的事情，这些都是你可能受到攻击的明确指示。
 攻击者正在做什么：黑客用来进入我的Coinbase帐户的基本策略。
 我感知到的威胁级别：我在这些事件发生时将其归因于威胁级别。
 我应该拥有的威胁级别：事后看来，我希望在这些事件发生时我会拥有的威胁级别。
  经验教训+建议 这是我生命中最昂贵的一节课。我在24小时内失去了相当重要比例的净值资产; 并且是不可逆的。以下是我鼓励其他人用来更好地保护自己的在线安全的一些建议： 使用硬件钱包，以确保您的加密：将您的密码到硬件钱包 /离线存储/ 多SIG钱包，只要你不交易。不要将资金闲置在交易所或法定进场。我将Coinbase视为银行账户，并且在发生攻击时你绝对没有追索权。我比大多数人更了解风险，但从未想过这样的事情会发生在我身上。我非常后悔没有采取加密安全措施。
 基于SMS的2FA还不够：无论您尝试在线保护的资产和/或身份如何，都要升级到基于硬件的安全性（即：攻击者为实施攻击而必须物理获取的物理内容）。虽然Google Authenticator和Authy可以将您的移动设备转变为基于硬件的安全性，但我建议您更进一步。拿起你实际控制的YubiKey，不能被欺骗。
 减少您的在线足迹：减少不必要地在线分享个人身份信息（出生日期，位置，嵌入其中的地理位置数据的图片等）的冲动。在发生攻击时，所有这些准公开数据都可以针对您。 Google Voice 2FA：在某些情况下，在线服务不支持基于硬件的2FA（它们依赖于较弱的基于SMS的2FA）。在这些情况下，您最好创建一个Google语音电话号码（无法通过SIM卡转移）并使用具有2-Factor Auth恢复号码的电话号码。
 创建辅助电子邮件地址：不是将所有内容绑定到单个电子邮件地址，而是为关键在线身份（银行帐户，社交媒体帐户，加密交换等）创建辅助地址。请勿将此电子邮件地址用于其他任何内容并将其保密。使用某种形式的基于硬件的2FA备份该地址。
 离线密码管理器：使用密码管理器输入密码。更好的是，使用密码存储等脱机密码管理器。lrvick拥有各种密码管理器的优秀对比图表，以及针对更具技术倾向的审查建议。
  关于读者的评论 我明白这一点：鉴于我天真的安全实践，我可能就应该注定被黑客攻击。这样做不会减少受到任何伤害，并且会削弱这个故事的主旨，即：
 让别人知道受到伤害是多么容易 使用上述知识和建议来优先考虑您的在线身份的安全性  我禁不住想到我可以做的小而轻松的事情来保护自己。我的脑海中涌现各种假设。
然而，这些想法伴随懒惰和幸存者偏见。我从来没有认真对待我的在线安全，因为我从未经历过攻击。虽然我了解自己的风险状况，但是我就是太懒导致我没有用该有的严谨来保护我的资产。
我恳请你们从这些错误中吸取教训。
参考  The Most Expensive Lesson Of My Life: Details of SIM port hack  </description>
    </item>
    
    <item>
      <title>数字货币交易所安全体系-资产篇</title>
      <link>https://myself659.github.io/2018/10/19/exchage-safe-asset/</link>
      <pubDate>Fri, 19 Oct 2018 11:58:06 +0200</pubDate>
      
      <guid>https://myself659.github.io/2018/10/19/exchage-safe-asset/</guid>
      <description>前面，简单介绍了数字货币交易所的安全体系，这一篇主要说说一下资产安全的一些要点。
如果将一条公链比作一个银行的话，当然这个银行是去中心化银行，那个各个交易所的节点就相当于银行的网点。这个节点有以下功能：
 帐本数据同步 用户资产托管 充币与提币  资产安全主要分为以下几个方面展开说明，具体如下：
意识 意识，意识，意识！其实意识就是一种天赋，只是我们没有注意到吧。
有些区块链的项目居然不知道私钥是何物。很多人会说这是不是搞技术不知道而已。 其实这是安全意识不到位。
意识教育与培养一定要先行。
帐本数据同步 帐本数据主要是节点数据同步，具体关注点如下：
 节点连接节点的确认 避免站错队 分叉 重放攻击防护 孤块 网络分化 帐本同步节点故障，多节点备份  资产托管 资产托管的核心就是私钥，要点如下：
 采用冷钱包管理私钥 热钱包管理策略（存活周期，资金金额控制，密钥管理） 私钥存储管理（多人多份多地） 多地址分散（不要把鸡蛋放在一个篮子里）  充币与提币 充币与提币都是有关托管资产的交易。
 合理的交易确认数 充币提币的用户验证 交易的不确定性处理办法如交易得不到确认 分叉时关闭充提币功能  监控 资金动向监控也是不可或缺的，要点如下：
 对首次提币地址及用户监控 保证监控的高可靠性 充币与提币数据分析 大额充提币的监控及确认  差异化 对于不同类型的资产需要具体问题具体分析。 如以太坊专门对基于智能合约的数字资产进行审计与防范，具体参考ERC20，这里不展开。
后记 对于资产安全，有什么新的想法与意见，欢迎交流！
欢迎关注 欢迎关注微信公众帐号：沉风网事(savewind)</description>
    </item>
    
    <item>
      <title>数字货币交易所安全防护体系介绍</title>
      <link>https://myself659.github.io/2018/10/15/exchage-safe-arch/</link>
      <pubDate>Mon, 15 Oct 2018 11:58:06 +0200</pubDate>
      
      <guid>https://myself659.github.io/2018/10/15/exchage-safe-arch/</guid>
      <description>说明 这里的交易所是指中心化交易所。下面按标题三个关键词展开说明。
交易所 交易所作为数字资产交易的平台。一直不断地就有安全问题出现，最著名的是Mt. Gox事件，影响恶劣。后续事故也不少，不多说了。交易所安全事故这只黑天鹅未来一定会再出现。
安全防护 安全的重要性毋庸置疑。
安全防护是全方位，多角度，多层次，全链路，持续不断的一种工程。
安全防护的结果是安全性。其主要取决于攻守双方。只有知道工作原理才能掌握如何防护。 安全防护从一开始就要考虑及落地而不是临时抱佛脚。
体系 针对交易所安全体系，分为以下几个方面：
 资产安全 平台安全 网络安全 用户安全 数据安全 交易安全 运营安全 安全策略  对于这8个方面，先挖坑，后面再填，有空的话一一展开说明。
参考  Exchange Security Report  欢迎关注 欢迎关注微信公众帐号：沉风网事(savewind)</description>
    </item>
    
    <item>
      <title>阿里云ECS基本安全检查小结</title>
      <link>https://myself659.github.io/2017/04/08/2017-04-08-ecs-basic-sec-check/</link>
      <pubDate>Sat, 08 Apr 2017 11:58:06 +0200</pubDate>
      
      <guid>https://myself659.github.io/2017/04/08/2017-04-08-ecs-basic-sec-check/</guid>
      <description>背景 查看阿里云ECS服务器日志发现如下：
type=USER_AUTH msg=audit(1491669519.156:15631): pid=22938 uid=0 auid=4294967295 ses=4294967295 msg=&#39;op=PAM:authentication acct=&amp;quot;deploy&amp;quot; exe=&amp;quot;/usr/sbin/sshd&amp;quot; hostname=123.57.245.163 addr=123.57.245.163 terminal=ssh res=failed&#39; type=USER_LOGIN msg=audit(1491669519.156:15632): pid=22938 uid=0 auid=4294967295 ses=4294967295 msg=&#39;op=login acct=28696E76616C6964207573657229 exe=&amp;quot;/usr/sbin/sshd&amp;quot; hostname=? addr=123.57.245.163 terminal=sshd res=failed&#39; type=USER_LOGIN msg=audit(1491669587.368:15634): pid=22940 uid=0 auid=4294967295 ses=4294967295 msg=&#39;op=login acct=28756E6B6E6F776E207573657229 exe=&amp;quot;/usr/sbin/sshd&amp;quot; hostname=? addr=123.57.245.163 terminal=sshd res=failed&#39; type=USER_LOGIN msg=audit(1491669587.368:15635): pid=22940 uid=0 auid=4294967295 ses=4294967295 msg=&#39;op=login acct=28696E76616C6964207573657229 exe=&amp;quot;/usr/sbin/sshd&amp;quot; hostname=? addr=123.57.245.163 terminal=sshd res=failed&#39; type=USER_AUTH msg=audit(1491669589.420:15636): pid=22940 uid=0 auid=4294967295 ses=4294967295 msg=&#39;op=PAM:authentication acct=&amp;quot;deploy&amp;quot; exe=&amp;quot;/usr/sbin/sshd&amp;quot; hostname=123.57.245.163 addr=123.57.245.163 terminal=ssh res=failed&#39; type=USER_LOGIN msg=audit(1491669589.420:15637): pid=22940 uid=0 auid=4294967295 ses=4294967295 msg=&#39;op=login acct=28696E76616C6964207573657229 exe=&amp;quot;/usr/sbin/sshd&amp;quot; hostname=?</description>
    </item>
    
  </channel>
</rss>