<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>研发管理 on 沉风网事</title>
    <link>https://myself659.github.io/tags/%E7%A0%94%E5%8F%91%E7%AE%A1%E7%90%86/</link>
    <description>Recent content in 研发管理 on 沉风网事</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 08 Mar 2020 11:58:06 +0200</lastBuildDate>
    
	<atom:link href="https://myself659.github.io/tags/%E7%A0%94%E5%8F%91%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>微盟删库事件复盘与思考</title>
      <link>https://myself659.github.io/2020/03/08/weimeng-del-data/</link>
      <pubDate>Sun, 08 Mar 2020 11:58:06 +0200</pubDate>
      
      <guid>https://myself659.github.io/2020/03/08/weimeng-del-data/</guid>
      <description>事故 先简单看一下整个事故的粗略时间线。
2月23日，微盟服务出现故障。商家商城、小程序均无法登录。
2月25日，微盟紧急恢复了核心业务的线上生产环境，新用户使用不受影响，并提供老用户临时过渡方案，确保商家在数据暂时没有恢复的情况下可以正常经营。
2月28号，微盟表示已经恢复了微站产品的所有数据，并已导入到商户店铺，新老用户使用将不受影响。
3月1号微盟表示数据已全面找回，并公布商家赔付计划。
影响 首先看股市反应：数据丢失，微盟损失惨重。在2月25日正式披露数据丢失后，微盟的股价连续三日大幅下跌，从6.2下跌到4.8差不多跌了25%，整个市值蒸发20亿元以上。
除此之外，本次事故对微盟的社会公信力有很大的影响，说明整个企业在运营、管理和技术安全上是有问题的，对企业的社会形象和商业业态都会遭受大家的质疑。
由于微盟整个系统的宕机，导致商家与消费者都不正常运营，部分可能直接停业，对整个社会的经济系统也有一些冲击与影响。
问题 作为一名局外人，对这次微盟删库事件，个人有以下问题：
 运维贺某是由于什么原因作出删库的事件？ 贺某删除了哪些数据？贺某删除整个生产环境的数据包括备份数据吗？ 微盟是数据架构是如何设计？让一个运维能够删除整个生产环境的数据？ 微盟的数据物理分布是如何设计的？ 微盟运维权限是如何管理？ 微盟离线备份数据是备份方式是怎么样？是增量还是快照方式？ 微盟离线备份数据为什么花了五天都不能够恢复？离线备份数据有多少？ 众多离线备份数据是如何恢复的？ 微盟离线备份数据是否完整？ 微盟离线备份数据恢复后如何验证？如何检查恢复数据与备份数据之间的一致性？ 微盟离线备份数据恢复是否相互依赖？ 微盟离线备份数据（毕竟微盟成立于2013年）是否兼容？如与应用程序兼容？ 微盟离线备份数据恢复的速度的瓶颈在哪里？网络带宽？硬盘IO? 数据不能并行恢复？验证困难？ 从备份数据到线上数据恢复，是恢复几份数据？如何保证这几个线上数据的一致性？ 如何防止误操作？ 如何量化赔偿商家的损失？ 如何快速检测运维违规操作并迅速报警？ 是否知道技术风险的存在，由于存在侥幸心理和事不关已，多一事不如少一事，放过这个潜在的风险？  经验教训 微盟经过七天七夜的抢救，成功救回了全部数据，从结果上来看是一次成功的抢救。但是数据恢复的时间太长，服务高可用直接打到99%以下。
事后微盟发布了改进计划，这些改进计划有针对性回答我上面一些问题。
 措施一：数据安全管理机制全面加固与整改，加强运维平台治理 1、完善数据安全管理制度（涵盖权限、监控、审计方面），严格执行授权审批制度； 2、使用腾讯云CAM权限系统进行云资源管理，严格执行分级授权和最小集权限制度，对高危险动作执行二次授权制度； 3、建立科学、高效、安全的网络策略，对开发环境、测试环境和生产环境进行严格隔离；使用腾讯云堡垒机替换自建堡垒机，进行细粒度权限分级和授权管理，同时严格审计堡垒机操作日志，发送安全审计报表； 4、加强运维安全流程学习，职业道德学习，法律学习等。 措施二：加强灾备体系的建设，做到多云异地冷备 1、建立多云灾备体系，在北京、上海、南京等地区建立全备份的冷备系统架构； 2、借助腾讯云的IAAS的底层服务能力，建立高可用的同城双活架构； 3、云上所有的云主机，启用每天的快照策略，保证全量和增量备份； 4、所有非结构化数据，使用腾讯COS对象存储系统进行归档保存，启用COS的多异地复制功能，数据存放多地，并且COS 冷存储，确保数据只增不减； 5、建立月、季度级别的定期演练机制和制度 。 措施三：基础设施全力上云 1、借助腾讯云数据库MySQL的数据高可用和安全体系，逐步放弃自建数据库服务 ，迁移到腾讯云数据库（CDB），快速具备数据库跨可用区和异地灾备的能力； 2、黑石1.0物理机全面升级黑石2.0，全面使用云主机。  上面这些总结很到位，个人帮微盟补充一些：
 学习netfix的企业文化中的第一条：招聘成年人。成年人不会作出对个人和公司双输的事件，成人有自己调整心态与控制情绪的能力。 学习netfix的实践，应用混顿工程，主动拥抱故障，提前演练与操作。国内阿里双11每年都要进行演练。 减少对人的依赖。在执行方面机器比人靠谱多了。  总结 总之，微盟这次删库事故是技术债与管理债长期累积不解决的结果。欠债不还，一定会在某个时间被某个黑天鹅事件引爆。
这次显露出来的技术问题的本质是数据高可用性技术的不足。
欢迎关注 欢迎关注微信公众帐号：沉风网事(savewind)</description>
    </item>
    
    <item>
      <title>大型系统软件Comware研发总结</title>
      <link>https://myself659.github.io/2018/12/05/comware-rd/</link>
      <pubDate>Wed, 05 Dec 2018 11:58:06 +0200</pubDate>
      
      <guid>https://myself659.github.io/2018/12/05/comware-rd/</guid>
      <description>前言 前几个月写一篇关于研发管理的文章。在那篇文章提出一个简单的思考框架，并没有实际案例的分享及深度分析。所以在这里以华三Comware研发为例，结合思考框架谈谈自己的一些理解与想法。
Comware 开始之前，先介绍一下Comware。其主要要点如下：
 整个系统代码量超过了1000万行（开源代码除外） 巅峰时期开发人员1000左右 支持设备类型超过100多种，同时支持各种丰富的网络特性 性能与可用性要求高，需要满足欧美高端市场（金融，国防等）要求及互联网大流量的冲击 作为公司的中台，支撑公司绝大部分产业线（安全，路由，交换，云计算等）  下面我们就一一展开说明。
业务 以业务中心。Comware作为一个网络操作系统，主要要求如下：
 充当网络设备的大脑 承载各种网络业务，并动态满足不同网络业务的要求及变化 保证整个系统 高可用性，高性能，可维护性，可扩展性，安全性等  文化 由于历史上的原因，整个研发文化总体上源于华为，稍有调整。具体要点如下：
 质量为上 结果导向
 研发三权分立 追求效率 鼓励创新 公开  关于科技公司的文化，推荐Netflix文化:自由与责任
团队 团队是从人的视角出发。要以人为本啊。
团队梯队合理清楚，按技术水平划分具体如下：
 开发上岗人员 维护上岗人员 开发负责人 系统扩展组 系统组 架构组  团队组织划分以业务导向，按照不同的业务划分不同大组，独立进行代码管理。在各个大组一般分为开发与维护两个方面进行人员动态调配。
团队建设主要是大组每周定期培训，鼓励分享，除此之外针对不同岗位有专项培训，如项目管理，代码管理。
架构 架构不是我们常说的架构，这里的架导指导代码的工作（架构从事的角度出发）。
选择开源，拥抱开源，不要重复造轮子 不得不说2008年开始预研下一代网络操作系统，当时的团队放弃vxwork，选择了开源linux，而且作到取自开源，高于开源，只使用linux基本组件（文件管理系统，内存管理系统，进程调度等），重新移植与修改协议栈，实现分布式网络协议，扩张SOCKET类型。采用Linux好处多多，具体如下：
 充分吸引Linux开源精华 Linux开源发展路径，决定Linux便于改造与优化 与Linux一起升级，如内核2.6升级到4.x版本
 方便开源引入支持，如移植wireshark， python Linux在服务器大量应用，业界有大量人才  合法合规 合法就不用多说了。注意的是要考虑到不同的国家与地区的差异。 合规方法最近的例子就是2017年百度要求内部全面停止使用React/React Native。利用开源的Linux作为基础开发商业操作系统，就不得不遵守开源协议。
KISS原则 关于KISS原则，架构设计通用原则，有太多说明，这里不展开。
开放性 对外开放接口，如OAA（Open Application Architecture，开放应用架构），这样有以下好处：
 对公司内部来说，降低了耦合 对外部合作方来说，方便不同厂商系统集成 对客户来说，提供了更多的选择以及DIY能力 开放与释放了平台的能力  分层与分解 整个系统采用分层设计有如下优点：</description>
    </item>
    
    <item>
      <title>关于技术选型的思考</title>
      <link>https://myself659.github.io/2018/09/05/tech-stack-explain/</link>
      <pubDate>Wed, 05 Sep 2018 11:58:06 +0200</pubDate>
      
      <guid>https://myself659.github.io/2018/09/05/tech-stack-explain/</guid>
      <description>技术选型内容 技术选型从组成要素的角度分为两大类：
 实现业务的代码 业务依赖的服务  本文围绕代码这一核心进行技术选型，对此分解以下五个问题：
 怎么管理代码？ 用什么语言写代码？ 怎么运行代码？ 在哪里运行代码？ 怎么大规模运维代码？  技术选型原则 先看一下技术选型应该考虑些什么呢？
 业务的特点与需求 资源和经验 可扩展性 可维护性 安全 成本（投入时间，人力，资源。。。）  简单总结为以下几点：
 稳定优先，善用为上 立足现状，着眼未来 验证先行，应用在后 业务导向，实践驱动  下面就根据这些原则一一回答上面五个问题，但是不会涉及具体的问题如消息队列是选RabbitMQ还是Kafka。
代码管理 对应上面的怎么管理代码的问题。首先是工具，现在大家都清一色的git。在git没有出来之前有以下这些工具：
 clearcase svn TortoiseCVS  再次就是选择平台。有以下选项
 github gitlab gitee gitbucket 自建gitlab
  选择自建gitlab。主要考虑如下：
 历史原因 Gitlab自带CI 代码安全考虑 自建gitlab带来的自主控制，有利于后续的发展  编程语言 以Golang为主，其他语言为辅助。
Why Golang  个人及其团队主要成员都有Golang经验 Golang在区块链项目中会占主导地位 更多理由见：Golang最工程化的语言  运行环境 运行环境分为以下几种：
 物理主机 虚拟机 Docker  除了一些特殊的场景，现在流行的作法当然是Docker。</description>
    </item>
    
    <item>
      <title>乱扯研发管理与领导</title>
      <link>https://myself659.github.io/2018/05/05/rd-leadship/</link>
      <pubDate>Sat, 05 May 2018 11:58:06 +0200</pubDate>
      
      <guid>https://myself659.github.io/2018/05/05/rd-leadship/</guid>
      <description> 前言 优秀的技术人员与技术管理人员会一直紧缺。一个好的技术管理人员应该有自己的管理及领导指导原则。（Ps：最近在读《原则》这本书，深受其影响，虽然已经有很多人在推荐，这里再推荐一下，这本书真的值得一读。） 结合个人的工作经历与思考，提出自己对研发管理与技术领导的一些原则性思考。
基本原则 具体如下图所示：
以业务为中心，从文化，团队，代码，架构四个方面进行出发思考。用一句简单总结一下就是：在先进的文化氛围下，精英团队在科学的架构指导以业务为中心开展各项代码工作（需求，设计，开发，测试，部署，升级）。
这是一个前进的方向及指导的框架，至于具体的落地需要按阶段与范围的践行。（Ps：中国改革开放40年在遵循一个中心，两个基本点的指导原则下，使中国经济发展取得翻天覆地的巨大变化。）
欢迎关注 欢迎关注微信公众帐号：沉风网事(savewind)
参考  Supercell，一家人均贡献超过3600万的公司，如何定义管理？  </description>
    </item>
    
  </channel>
</rss>