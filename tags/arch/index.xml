<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arch on 沉风网事</title>
    <link>http://myself659.github.io/tags/arch/</link>
    <description>Recent content in Arch on 沉风网事</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>沉风网事</copyright>
    <lastBuildDate>Sun, 21 Jul 2019 11:58:06 +0200</lastBuildDate><atom:link href="http://myself659.github.io/tags/arch/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>正交思维与软件工程</title>
      <link>http://myself659.github.io/post/arch/orthogonal-thinking-in-software/</link>
      <pubDate>Sun, 21 Jul 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/orthogonal-thinking-in-software/</guid>
      <description>什么是Orthogonal？ orthogonal表面意思是正交的，直角的。 平面几何的坐标系的x轴与y轴就是正交关系。 在软件工程中Orthog</description>
    </item>
    
    <item>
      <title>Consistency Level 101</title>
      <link>http://myself659.github.io/post/arch/consistency-level-101/</link>
      <pubDate>Sat, 19 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/consistency-level-101/</guid>
      <description>前言 在分布式系统中，**一致性（Consistency）**始终是核心挑战之一。随着副本数量增多、跨机房部署的普及，我们必须权衡一致性、可用</description>
    </item>
    
    <item>
      <title>Application Gateway 101</title>
      <link>http://myself659.github.io/post/arch/application-gateway-101/</link>
      <pubDate>Fri, 18 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/application-gateway-101/</guid>
      <description>前言 在现代互联网架构中，随着服务化、微服务和云原生架构的广泛应用，系统前端需要具备更强大的流量控制能力，不仅要转发请求，还要处理认证、安全、</description>
    </item>
    
    <item>
      <title>Hinted Handoff 101</title>
      <link>http://myself659.github.io/post/arch/hinted-handoff-101/</link>
      <pubDate>Fri, 18 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/hinted-handoff-101/</guid>
      <description>前言 在分布式系统中，节点故障是常态而不是例外。为了保障高可用性与最终一致性，很多系统引入了一种重要机制：Hinted Handoff（提示式转</description>
    </item>
    
    <item>
      <title>Proxy 101</title>
      <link>http://myself659.github.io/post/arch/proxy-101/</link>
      <pubDate>Fri, 18 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/proxy-101/</guid>
      <description>前言 在当今互联网系统中，Proxy（代理） 是一种极为常见且强大的中间组件，广泛应用于访问控制、负载均衡、安全隔离、缓存加速等场景。无论是客户</description>
    </item>
    
    <item>
      <title>Quorum 101</title>
      <link>http://myself659.github.io/post/arch/quorum-101/</link>
      <pubDate>Fri, 18 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/quorum-101/</guid>
      <description>前言 在分布式系统中，多副本机制确保了数据的高可用性与容错能力，但同时也带来了副本间一致性的问题。为了在性能、可用性与一致性之间取得平衡，Qu</description>
    </item>
    
    <item>
      <title>Rate Limiter 101</title>
      <link>http://myself659.github.io/post/arch/rate-limiter-101/</link>
      <pubDate>Fri, 18 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/rate-limiter-101/</guid>
      <description>前言 在现代互联网系统中，用户访问量巨大且不可预期，恶意刷接口、突发流量暴涨等问题屡见不鲜。为了保护系统稳定性、保障资源公平使用，Rate Li</description>
    </item>
    
    <item>
      <title>Read Repair 101</title>
      <link>http://myself659.github.io/post/arch/read-repair-101/</link>
      <pubDate>Fri, 18 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/read-repair-101/</guid>
      <description>前言 在分布式系统中，数据被多副本存储是常见做法，用于提升容错与可用性。然而，多副本之间的数据一致性维护是一个复杂的问题。**Read Repa</description>
    </item>
    
    <item>
      <title>RESTAPI 101</title>
      <link>http://myself659.github.io/post/arch/restapi-101/</link>
      <pubDate>Fri, 18 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/restapi-101/</guid>
      <description>前言 在现代互联网系统中，REST API（Representational State Transfer Application Programming Interface）无处不在，是系统组件之间进行通信和数据交</description>
    </item>
    
    <item>
      <title>Segmented Log 101</title>
      <link>http://myself659.github.io/post/arch/segmented-log-101/</link>
      <pubDate>Thu, 17 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/segmented-log-101/</guid>
      <description>前言 在现代分布式系统、日志系统、消息队列和数据库中，高效、可靠的写入与持久化机制是系统核心能力之一。传统的线性日志虽然简单，但在长时间运行、</description>
    </item>
    
    <item>
      <title>Write-Ahead Log 101</title>
      <link>http://myself659.github.io/post/arch/write-ahead-log-101/</link>
      <pubDate>Wed, 16 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/write-ahead-log-101/</guid>
      <description>前言 在现代互联网系统中，数据的可靠性与一致性至关重要。尤其在数据库、分布式系统和文件系统中，为了防止系统崩溃后数据丢失，Write-Ahea</description>
    </item>
    
    <item>
      <title>B-tree 101</title>
      <link>http://myself659.github.io/post/arch/b-tree-101/</link>
      <pubDate>Mon, 14 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/b-tree-101/</guid>
      <description>前言 在现代互联网系统与数据库技术中，数据的高效查询与有序存储一直是核心目标。尤其在关系型数据库和文件系统中，B-Tree 是广泛使用的数据结构</description>
    </item>
    
    <item>
      <title>LSM tree 101</title>
      <link>http://myself659.github.io/post/arch/lsm-tree-101/</link>
      <pubDate>Mon, 14 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/lsm-tree-101/</guid>
      <description>LSM Tree 101 前言 在现代互联网系统中，海量数据的高效写入和查询是数据库系统设计的核心目标之一。特别是写多读少或写入密集型的场景中，传统B-Tree类</description>
    </item>
    
    <item>
      <title>merkel tree 101</title>
      <link>http://myself659.github.io/post/arch/merkeltree-101/</link>
      <pubDate>Mon, 14 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/merkeltree-101/</guid>
      <description>前言 在现代互联网系统，特别是区块链、分布式存储、数据同步等领域，数据完整性校验至关重要。Merkle Tree（默克尔树）作为一种高效的结构化</description>
    </item>
    
    <item>
      <title>CuckooFilter 101</title>
      <link>http://myself659.github.io/post/arch/cuckoo-filter-101/</link>
      <pubDate>Sun, 13 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/cuckoo-filter-101/</guid>
      <description>前言 在现代互联网系统中，过滤器作为高效的集合判断结构被广泛使用。尤其在**布隆过滤器（Bloom Filter）**存在删除困难和空间使用不佳</description>
    </item>
    
    <item>
      <title>BloomFilter 101</title>
      <link>http://myself659.github.io/post/arch/bloomfilter-101/</link>
      <pubDate>Sat, 12 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/bloomfilter-101/</guid>
      <description>前言 在现代互联网系统中，性能与资源的平衡尤为重要。**Bloom Filter（布隆过滤器）**作为一种极致空间效率的数据结构，常用于“快速判</description>
    </item>
    
    <item>
      <title>Queue 101</title>
      <link>http://myself659.github.io/post/arch/queue-101/</link>
      <pubDate>Thu, 10 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/queue-101/</guid>
      <description>前言 在现代互联网系统中，队列（Queue）作为系统“解耦、削峰、异步处理”的核心手段，几乎无处不在。从消息传递、任务调度到事件驱动架构，队列</description>
    </item>
    
    <item>
      <title>Consistent Hash 101</title>
      <link>http://myself659.github.io/post/arch/consistent-hash-101/</link>
      <pubDate>Wed, 09 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/consistent-hash-101/</guid>
      <description>前言 在现代互联网系统中，分布式架构已成常态，如何高效、平滑地将数据或请求映射到多个节点，是系统设计中的关键问题。**一致性哈希（Consis</description>
    </item>
    
    <item>
      <title>loadbalance 101</title>
      <link>http://myself659.github.io/post/arch/loadbalance-101/</link>
      <pubDate>Wed, 09 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/loadbalance-101/</guid>
      <description>前言 在现代互联网架构中，负载均衡（Load Balancing）几乎是每一个高可用、高并发系统的基础组件之一。它在系统稳定性、扩展性与性能方面</description>
    </item>
    
    <item>
      <title>Cache 101</title>
      <link>http://myself659.github.io/post/arch/cache-101/</link>
      <pubDate>Tue, 08 Jan 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/cache-101/</guid>
      <description>前言 在现在互联网系统中cache无处不在，无时不用。 定义 wiki定义如下： a cache is a hardware or software component that stores data so that future requests for that data can be served faster; 工作原理 一句话：通过将</description>
    </item>
    
    <item>
      <title>软件工程的法则与名言</title>
      <link>http://myself659.github.io/post/arch/software-engineering-great-quotes/</link>
      <pubDate>Fri, 11 May 2018 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/software-engineering-great-quotes/</guid>
      <description>Programming “All problems in computer science can be solved by another level of indirection.” — David Wheeler “But that usually will create another problem.” — David Wheeler “Simplicity is prerequisite for rel</description>
    </item>
    
    <item>
      <title>高性能服务器设计与优化</title>
      <link>http://myself659.github.io/post/2017-05-09-web-server-perf-and-design/</link>
      <pubDate>Tue, 09 May 2017 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/2017-05-09-web-server-perf-and-design/</guid>
      <description>为了构建自己的知识体系，对高性能服务器设计与优化一点想法，其中不足与错误，欢迎指正。 高性能服务器设计与优化</description>
    </item>
    
    <item>
      <title>对于系统设计的一些想法</title>
      <link>http://myself659.github.io/post/2017-04-29-about-system-design/</link>
      <pubDate>Sat, 08 Apr 2017 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/2017-04-29-about-system-design/</guid>
      <description>前言 学习了google，facebook等国际一流大厂的开源方案，也研究了国内BAT的一些设计案例，在平时工作自然也少不了一些系统设计的工作</description>
    </item>
    
    <item>
      <title>IM后端系统设计总结(2)</title>
      <link>http://myself659.github.io/post/arch/2016-08-05-im-user-state/</link>
      <pubDate>Fri, 05 Aug 2016 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/2016-08-05-im-user-state/</guid>
      <description>这篇具体写一下用户在线状态系统的具体设计。 后端架构 这个后端系统设计如下图： 很大众，国内基本都这么干，不多说 用户状态系统设计 初期设计 单IDC部</description>
    </item>
    
    <item>
      <title>IM后端系统设计总结(1)</title>
      <link>http://myself659.github.io/post/arch/2016-07-29-im-message/</link>
      <pubDate>Fri, 29 Jul 2016 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/2016-07-29-im-message/</guid>
      <description>定义IM 为用户提供即时消息服务，这里面有三个关键词：用户，消息，服务；下面根据三个关键词来展开总结，先从消息开始。 消息 消息分类 对消息分类，很</description>
    </item>
    
    <item>
      <title>10 Lessons from 10 Years of Amazon Web Services（译文）</title>
      <link>http://myself659.github.io/post/arch/2016-06-02-10-lessons-from-10-years-of-amazon-web-services/</link>
      <pubDate>Thu, 02 Jun 2016 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/2016-06-02-10-lessons-from-10-years-of-amazon-web-services/</guid>
      <description>前言 亚马逊在2006年3月14日发布AWS，到现在差不多10年了。回首过去的10年里，我们在构建 安全，高可用性，可扩展性，低成本的服务方面积</description>
    </item>
    
    <item>
      <title>Facebook live一些技术细节</title>
      <link>http://myself659.github.io/post/arch/2016-05-27-facebook-live-detail/</link>
      <pubDate>Fri, 27 May 2016 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/arch/2016-05-27-facebook-live-detail/</guid>
      <description>协议选择 最初选择HLS,后面切换为RTMP，切换为RTMP主要为了降低延迟，提供更好直播用户体验。 解决并发问题 分发架构 采用Live stream serv</description>
    </item>
    
  </channel>
</rss>
