<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Distributed on 沉风网事</title>
    <link>https://blog.ipds.top/tags/distributed/</link>
    <description>Recent content in Distributed on 沉风网事</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 24 Dec 2018 11:58:06 +0200</lastBuildDate>
    
	<atom:link href="https://blog.ipds.top/tags/distributed/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于区块链共识的一些思考</title>
      <link>https://blog.ipds.top/2018/12/24/%E5%85%B3%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E5%85%B1%E8%AF%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</link>
      <pubDate>Mon, 24 Dec 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/12/24/%E5%85%B3%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E5%85%B1%E8%AF%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</guid>
      <description>说明 前面写一篇关于分布式系统的文章，但是没有考虑拜占庭问题，所以聊聊区块链共识技术，在这个过程看看比特币是如何解决拜占庭问题和共识问题。
定义 区块链是什么？这个问题有太多的回答。
 区块链是一个由全体联网节点共同维护并持有同一账本的分布式数据库，它通过算法来达成共识，在无需信任的各节点中构建一个无单一故障点或控制点的去中心化可信系统
 所以在技术上区块链的本质是分布式帐本技术(DLT)。
重要性 Why Decentralization Matters这篇文章从互联网发展历程与面临问题说明去中心化重要性。
去中心化重要性来自去中心化带来的影响与作用，具体如下：
 去中心化可以降低垄断的可能性，是一种对抗垄断的重要方式 去中心化提供高可用性 去中心化对抗DDos 去中心化可以让人人参与，权力下放 去中心化是让数据归还用户，保护隐私的重要技术手段之一 去中心化消除中间环节，提高效率 去中心化与中心化并不是对立，可以相互补充 去中心化能够解决中心化无法解决的问题，如微信流控算法，并没有采用全局，而由节点根据延迟参数调整，另外是5G带来的高速传输与海量数据需要去中心化来来解决
  去中心化解决问题  提供全球开放的分布式数据 提供不可更改的数据库 提供trustless的基础设施 基于以上三点的业务的需求  思考模型 如同前面的分布式系统一样，对于公链（去中心化系统）问题，也可以分为以下几个子问题：
 在什么环境下？ 有哪些节点参与？ 通过什么样的共识算法？ 使什么业务？ 达成什么样的容错要求？  总结一句话：在什么环境下，有哪些节点参与，通过什么样的共识算法，使什么业务达成什么样的容错要求。
下面就这五个问题展开说明。
环境 大部分去中心化系统的环境要点如下：
 异步网络模型 网络结构是P2P网络 网络传输是不可靠的 系统异常是常态 并发 缺少全局时钟  (Ps:这里不展开说明了，谈谈对分布式系统的一些思考)
节点 节点准入方面  节点自由加入与退出 节点需要通过PoW测试才能加入 节点需要PoS持仓才能加入
 节点需要质押才能加入  节点角色  节点平等，无角色任何差异如比特币 节点分为超级节点，见证节点如EOS  节点数量  不限数量，如比特币，以太坊 指定数量，如EOS指定为21，steemit指定数量为11</description>
    </item>
    
    <item>
      <title>谈谈对分布式系统的一些思考</title>
      <link>https://blog.ipds.top/2018/12/11/%E8%B0%88%E8%B0%88%E5%AF%B9%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</link>
      <pubDate>Tue, 11 Dec 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/12/11/%E8%B0%88%E8%B0%88%E5%AF%B9%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</guid>
      <description>说明 本文限定在分布式系统不考虑拜占庭问题。即所有节点都是可信的。
定义 分布式系统是多个节点协作完全一个共同的业务。
重要性 分布式理论的重要性毋庸置疑，一句话总结：没有分布式理论，就没有现在互联网与云计算。在分布式系统实践过程中离不开分布式系统理论指导，对其重要性打个比方：分布式系统理论是分布式系统实践过程中地图与导航。
分布式主要解决问题 分布式主要解决以下几个问题：
 解决SPOF问题，满足高可用性需求 解决Scale out问题，满足扩展性需求 解决数据分布问题，满足业务的需求  分布式是解决方案也是问题 一般情况，人们为了解决一个问题，往往会引入一个新的问题。试想如下： 由于SPOF存在，再加入一个节点作为备份。这样确实提高了系统高可用性，但是有以下新问题：
 如何检测节点状态？如何快速检测节点状态？ 如果检测主节点失败，备节点如何进行切换？ 主备节点如何同步数据？ 网络分化出现双主，如何避免与处理？  思考模型 对于分布式系统理论，分为以下几个子问题：
 在什么环境下？ 有哪些节点参与？ 通过什么样的共识算法？ 使什么业务？ 达成什么样的容错要求？  总结一句话：在什么环境下，有哪些节点参与，通过什么样的共识算法，使什么业务达成什么样的容错要求。
下面就这五个问题展开说明。
环境 分布式系统环境特点如下：
 从网络同步模型上分为同步网络，异步网络，半同步网络三种 系统异常是常态 网络传输是不可靠的 并发 缺少全局时钟  网络模型 同步网络是指网络带宽与延迟都是可以保证的。实际上现在IP网络都不属于这种，满足这种的网络是ATM网络（注意不是我们常见的提款机ATM）。
异步网络则是指网络带宽与延迟都不确定，在异步网络发送的报文会丢失。我们正在使用主的IP网络属于这种。
部分同步网络处于这两者中间。
异常 机器异常通常有以下几种情况：
 电源 机器元器件故障如内存，硬盘 操作系统故障 软件故障与程序bug 资源耗尽，如内存，CPU，硬盘空间，网络带宽等  网络传输不可靠 网络传输不可靠主要体现以下几个方面：
 丢包，传输成功不确定性 延时，延时时间不确定性 重传与报文重复 乱序  并发 如同操作系统中多线程并发，分布式系统多节点在并发。但是分布式系统的并不能像多线程上通过操作系统的锁机制来处理并发，在分布式系统实现一个锁比操作系统上难度大多了。
缺少全局时钟 一个人有一只表时，可以知道现在是几点钟，而当他同时拥有两只时却无法确定。分布式系统不同节点很难有相同的时钟。
节点 节点数量 节点数量，在实践过程中，至少两个，常见三个节点，部分情况五个节点。</description>
    </item>
    
    <item>
      <title>为什么BFT要求诚实节点数量大于总节点的三分之二</title>
      <link>https://blog.ipds.top/2018/03/23/%E4%B8%BA%E4%BB%80%E4%B9%88bft%E8%A6%81%E6%B1%82%E8%AF%9A%E5%AE%9E%E8%8A%82%E7%82%B9%E6%95%B0%E9%87%8F%E5%A4%A7%E4%BA%8E%E6%80%BB%E8%8A%82%E7%82%B9%E7%9A%84%E4%B8%89%E5%88%86%E4%B9%8B%E4%BA%8C/</link>
      <pubDate>Fri, 23 Mar 2018 11:58:06 +0200</pubDate>
      
      <guid>https://blog.ipds.top/2018/03/23/%E4%B8%BA%E4%BB%80%E4%B9%88bft%E8%A6%81%E6%B1%82%E8%AF%9A%E5%AE%9E%E8%8A%82%E7%82%B9%E6%95%B0%E9%87%8F%E5%A4%A7%E4%BA%8E%E6%80%BB%E8%8A%82%E7%82%B9%E7%9A%84%E4%B8%89%E5%88%86%E4%B9%8B%E4%BA%8C/</guid>
      <description> 相信很多人都知道，BFT(Byzantine fault tolerance)要求诚实节点数量大于总节点的三分之二。
为什么会有这个要求？
多数派原则 多数派原则在分布式系统很常见，即确保网络分化情况下的决议唯一。其原理是，假如节点总数是2f+1，那么一项决议得到多于f个节点赞成则获得通过。leader选举中，网络分化下，只有具有多数派节点的部分才可能选出leader。多数派还可以用于副本管理，根据实际情况调整写副本数和读副本数，在可靠性和性能之间取得平衡。 在分布式系统，无论paxos，还是raft，以投票来达成共识，在整个达成共识的过程中都遵守多数派原则。
下面先看多数派原则在raft中应用。
raft 假定f表示系统同时允许最大故障节点数量(f节点数量决定了系统可用性的概率)，在这种情况下，根据多数派原则，那么正常节点至少为f+1，即可以得出系统总节点数为2f+1。
BFT 在Raft协议中假设所有节点都是诚实节点，而在BFT假定系统存在一些作恶节点。 那么一个BFT中最多允许有多少个作恶节点？
进行逆向思考如下：
假如系统有f个作恶节点，那么在多数派系统，不作恶节点至少有f+1个。 f+1节点能够满足吗？不可以，网络分区是一直都存在，结合raft上，那么不作恶节点至少为2f+1，从而可以得出总节点数3f+1个。
参考  漫谈分布式系统、拜占庭将军问题与区块链  </description>
    </item>
    
  </channel>
</rss>