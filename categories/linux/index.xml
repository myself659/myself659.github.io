<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on 沉风网事</title>
    <link>http://myself659.github.io/categories/linux/</link>
    <description>Recent content in Linux on 沉风网事</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>沉风网事</copyright>
    <lastBuildDate>Sat, 25 Sep 2021 11:58:06 +0800</lastBuildDate><atom:link href="http://myself659.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>linux btop 101</title>
      <link>http://myself659.github.io/post/linux/linux-btop/</link>
      <pubDate>Sat, 25 Sep 2021 11:58:06 +0800</pubDate>
      
      <guid>http://myself659.github.io/post/linux/linux-btop/</guid>
      <description>背景 最近发现一个很好用的系统监控命令：btop。 btop一站式实时显示cpu，memory，disk，network，processes的统</description>
    </item>
    
    <item>
      <title>利用WSL和wget从github下载文件</title>
      <link>http://myself659.github.io/post/linux/linux-wget-retry/</link>
      <pubDate>Fri, 31 Jul 2020 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/linux/linux-wget-retry/</guid>
      <description>背景 由于GFW的干扰，即使科学上网方式从github下载文件，下载连接经常会被中断。由于chrome重新连接的次数有限，据说chrome重新</description>
    </item>
    
    <item>
      <title>Linux进程诊断小结</title>
      <link>http://myself659.github.io/post/2017-05-10-linux-process-diagnose/</link>
      <pubDate>Wed, 10 May 2017 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/2017-05-10-linux-process-diagnose/</guid>
      <description>日常工作中最常见问题是如何诊断一个进程运行过程中出现的问题，下面的总结从进程诊断的角度来展示，而是不从工具与命令角度来展示，进程诊断是工作的</description>
    </item>
    
    <item>
      <title>git常用命令总结</title>
      <link>http://myself659.github.io/post/2016-05-21-git-cmd/</link>
      <pubDate>Sat, 21 May 2016 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/2016-05-21-git-cmd/</guid>
      <description>配置 config user 1 2 git config --global user.email &amp;#34;you@example.com&amp;#34; git config --global user.name &amp;#34;Your Name&amp;#34; Ignore Git permission changes 1 git config core.fileMode false Fix .gitignore 1 git rm -r --cached . git仓库 初始化一个版本仓库 1 git init clone远程版本库 1 git clone git@github.com:myself659/FFmpeg.git 添加远程版</description>
    </item>
    
    <item>
      <title>Linux内核常见crash原因</title>
      <link>http://myself659.github.io/post/2016-04-17-linux-kernel-crashs/</link>
      <pubDate>Sun, 17 Apr 2016 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/2016-04-17-linux-kernel-crashs/</guid>
      <description>前言 与前同事交流，发现以前的技术经历与解决的问题，现在接触不多，但是想想还是很有意思，虽然很多细节现在已经不能表达出来或展示出来，但是还得写</description>
    </item>
    
    <item>
      <title>Linux x86-64 函数调用栈实例分析</title>
      <link>http://myself659.github.io/post/2016-03-09-x86-64-call-stack/</link>
      <pubDate>Wed, 09 Mar 2016 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/2016-03-09-x86-64-call-stack/</guid>
      <description>前言 动手实践并写文章花5倍的时间一次性把事情做到90分，好过读别人文章只能做到60分，后面还需要花时间继续深入学习(做事情一定要做到有效的阈</description>
    </item>
    
    <item>
      <title>docker image命令实践</title>
      <link>http://myself659.github.io/post/k8s/2016-01-28-docker-cmd-pratice/</link>
      <pubDate>Thu, 28 Jan 2016 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/k8s/2016-01-28-docker-cmd-pratice/</guid>
      <description>搭建了docker环境，就来体验一下Docker，常用docker image命令如下： 1. 搜索docker image 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description>
    </item>
    
    <item>
      <title>升级Linux内核，搭建docker环境</title>
      <link>http://myself659.github.io/post/k8s/2015-12-13-docker-way-1-build-docker-env/</link>
      <pubDate>Sun, 13 Dec 2015 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/k8s/2015-12-13-docker-way-1-build-docker-env/</guid>
      <description>docker可以说是去年最热的技术，也是业界大谈特谈的技术，到了今年有很多公司已经将docker应用于自己的生产环境。Docker已经从一个</description>
    </item>
    
    <item>
      <title>gdb自定义断点操作</title>
      <link>http://myself659.github.io/post/2015-08-28-gdb-command-example/</link>
      <pubDate>Fri, 28 Aug 2015 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/2015-08-28-gdb-command-example/</guid>
      <description>gdb是c/c++上调试利器，有很多技巧能让调试程序与解决问题更加方便与高效，下面关于command 命令的使用一个实例，具体如下： 1. 设置断点</description>
    </item>
    
    <item>
      <title>Linux netstat 应用示例</title>
      <link>http://myself659.github.io/post/2015-07-28-linux-netstat/</link>
      <pubDate>Tue, 28 Jul 2015 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/2015-07-28-linux-netstat/</guid>
      <description>关于netstat netstat 命令用于显示各种网络相关信息，如网络连接，路由表，接口状态 (Interface Statistics)，masquerade 连接，多播成员 (Multicast</description>
    </item>
    
    <item>
      <title>那些可进入睡眠状态的Linux内核函数</title>
      <link>http://myself659.github.io/post/linux/2015-06-01-linux-may-sleep-function/</link>
      <pubDate>Wed, 27 May 2015 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/linux/2015-06-01-linux-may-sleep-function/</guid>
      <description>在linux内核开发中断处理函数不能调用可能导致睡眠的函数，下面总结linux内核可能引起睡眠的函数如下： schedule函数 schedule_timeout schedule_timeout_uninterruptible schedule_timeout_interruptible cond_resched might_resched sl</description>
    </item>
    
    <item>
      <title>Linux性能优化杂谈</title>
      <link>http://myself659.github.io/post/linux/2015-05-24-linux-perf-thought/</link>
      <pubDate>Sun, 24 May 2015 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/linux/2015-05-24-linux-perf-thought/</guid>
      <description>性能不仅仅是一串串数字，性能体现更大的吞吐量及更低的延迟；如果网络延迟增加0.1秒，google每秒损失100W,不是人民币是美元；网页响应</description>
    </item>
    
    <item>
      <title>在没有分支miss条件下，实现取最小值</title>
      <link>http://myself659.github.io/post/linux/2015-05-24-linux-perf-tips-nobranchmiss/</link>
      <pubDate>Sun, 24 May 2015 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/linux/2015-05-24-linux-perf-tips-nobranchmiss/</guid>
      <description>在实际性能优化过程，加了一个if判断整个系统转发性能就有大约5%的下降，下面简单分享一种在没有分支miss条件下，实现取最小值的方法。 一般实</description>
    </item>
    
  </channel>
</rss>
