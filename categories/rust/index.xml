<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on 沉风网事</title>
    <link>http://myself659.github.io/categories/rust/</link>
    <description>Recent content in Rust on 沉风网事</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>沉风网事</copyright>
    <lastBuildDate>Thu, 08 Dec 2022 11:58:06 +0200</lastBuildDate><atom:link href="http://myself659.github.io/categories/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust lifetime 101</title>
      <link>http://myself659.github.io/post/rust/rust-lifetime/</link>
      <pubDate>Thu, 08 Dec 2022 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/rust/rust-lifetime/</guid>
      <description>定义 在 Rust 中，生命周期（lifetime）是用来描述引用（reference）有效期的一种概念。每个引用都有一个生命周期，表示该引用指向的数据</description>
    </item>
    
    <item>
      <title>rust type cheat sheet </title>
      <link>http://myself659.github.io/post/rust/rust-type-cheat-sheet/</link>
      <pubDate>Wed, 08 Dec 2021 11:58:06 +0800</pubDate>
      
      <guid>http://myself659.github.io/post/rust/rust-type-cheat-sheet/</guid>
      <description>Option 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // To inner type unwrap () -&amp;gt; T unwrap_or (T) -&amp;gt; T unwrap_or_else (() -&amp;gt; T) -&amp;gt; T unwrap_or_default () -&amp;gt; T where T: Default expect (&amp;amp;str) -&amp;gt; T //Converting to another type map ((T) -&amp;gt; U) -&amp;gt; Option&amp;lt;U&amp;gt; map_or (U, (T) -&amp;gt; U) -&amp;gt; U</description>
    </item>
    
    <item>
      <title>typeof for Rust </title>
      <link>http://myself659.github.io/post/rust/rust-type-of/</link>
      <pubDate>Wed, 08 Dec 2021 11:58:06 +0800</pubDate>
      
      <guid>http://myself659.github.io/post/rust/rust-type-of/</guid>
      <description>typeof for C c语言的typeof的应用： 1 2 3 #define SWAP(a, b) do { \ typeof(a) tmp = a; b = a; a = tmp; \ } while(0) 1 2 3 4 5 #define offsetof(TYPE, MEMBER) ((size_t) &amp;amp;((TYPE *)0)-&amp;gt;MEMBER) #define container_of(ptr, type, member) ({ \ const typeof( ((type *)0)-&amp;gt;member ) *__mptr = (ptr); \ (type *)( (char *)__mptr -</description>
    </item>
    
    <item>
      <title>tips for learning rust</title>
      <link>http://myself659.github.io/post/rust/tips-learn-rust/</link>
      <pubDate>Wed, 08 Sep 2021 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/rust/tips-learn-rust/</guid>
      <description>资料 The Rust Programming Language Rust Language Cheat Sheet Zero to Production in Rust This Week in Rust awesome-rust awesome-cli-rust tools and libaries cargo-asm A cargo subcommand that displays the generated assembly of Rust source code. cargo-fuzz A cargo subcommand for fuzzing with libFuzzer hyperfine A command-line benchmarking tool flamegraph sqlx yarte opentelemetry thiserror rust-clippy Serde Tokio Rocketi Rocket Diesel Rayon Actix Hyper Anyhow Thiserror PyO3 Rkyv 心法</description>
    </item>
    
    <item>
      <title>writing a tree in rust</title>
      <link>http://myself659.github.io/post/rust/rust-tree-demo/</link>
      <pubDate>Tue, 07 Sep 2021 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/rust/rust-tree-demo/</guid>
      <description>define the tree structure 1 2 3 4 5 6 7  #[derive(PartialEq)] struct TreeNode&amp;lt;T&amp;gt; { pub value: Option&amp;lt;T&amp;gt;, pub children: Vec&amp;lt;Rc&amp;lt;RefCell&amp;lt;TreeNode&amp;lt;T&amp;gt;&amp;gt;&amp;gt;&amp;gt;, pub parent: Option&amp;lt;Rc&amp;lt;RefCell&amp;lt;TreeNode&amp;lt;T&amp;gt;&amp;gt;&amp;gt;&amp;gt;, }   new tree 1 2 3 4 5 6 7  pub fn new() -&amp;gt; TreeNode&amp;lt;T&amp;gt; { TreeNode { value: None, children: vec![], parent: None, } }   add_child 1 2 3  pub fn add_child(&amp;amp;mut self, new_node: Rc&amp;lt;RefCell&amp;lt;TreeNode&amp;lt;T&amp;gt;&amp;gt;&amp;gt;) { self.children.push(new_node); }   del_child 1 2 3 4  pub fn del_child(&amp;amp;mut self, node_to_remove: Rc&amp;lt;RefCell&amp;lt;TreeNode&amp;lt;T&amp;gt;&amp;gt;&amp;gt;) { self.</description>
    </item>
    
    <item>
      <title>Rust Vec 101</title>
      <link>http://myself659.github.io/post/rust/rust-vec/</link>
      <pubDate>Sun, 08 Sep 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/rust/rust-vec/</guid>
      <description>vector in Rust 1 2 3 4 5 struct Vec { length: u32, //Present size of vector ptr: RefCell, //Pointer to allocate Memory on Heap capacity: u32, //Max size vector can hold, after this vector need to be resized/reallocated } create 不指定数据类型 1 2 let mut v1 = Vec::new(); let mut v2 = vec![]; 指定数据类型 1 2 3 let</description>
    </item>
    
    <item>
      <title>Rust crate加速</title>
      <link>http://myself659.github.io/post/rust/rust-crate-speedup/</link>
      <pubDate>Sun, 11 Aug 2019 11:58:06 +0200</pubDate>
      
      <guid>http://myself659.github.io/post/rust/rust-crate-speedup/</guid>
      <description>由于墙的原因，导致cargo build，cargo run都会出现概率性失败，并且整个过程十分缓慢。 下面是解决方案： 方案1 在 ~/.cargo/</description>
    </item>
    
  </channel>
</rss>
